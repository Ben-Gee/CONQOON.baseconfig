---
- name: install apt requirements
  apt:
    pkg: aptitude
  when: ansible_distribution_version == "16.04"

- name: Ensure apt cache is updated
  apt: update_cache=yes cache_valid_time=3600

- name: Ensure all packages are upgraded safely
  apt: upgrade=safe

- name: Add keys to apt
  apt_key: url="{{ item }}" state=present
  with_items: "{{ baseconfig_apt_keys }}"
  when: baseconfig_apt_keys

- name: Add ppas to apt
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items: "{{ baseconfig_apt_ppas }}"
  when: baseconfig_apt_ppas

- name: Install base apt packages
  apt:
    name: "{{ baseconfig_apt_packages }}"
    state: latest
  when: baseconfig_apt_packages is defined and baseconfig_apt_packages | length > 0

- name: Ensure unattended upgrades are configured
  copy: src="{{ baseconfig_file_10periodic }}" dest=/etc/apt/apt.conf.d/10periodic

- name: Make sure server_base_path exists
  file: path={{ server_base_path }} state=directory

- name: Make sure project group exists
  group: name={{ baseconfig_project_group }} state=present
  when: baseconfig_create_user_and_group

- name: Make sure project user exists
  user: name={{ baseconfig_project_user }} group={{ baseconfig_project_group }} generate_ssh_key=yes home={{ baseconfig_project_path }} shell=/bin/bash
  when: baseconfig_create_user_and_group

- name: Add web user into project group
  user: name={{ baseconfig_web_user }} groups={{ baseconfig_project_group }} append=yes
  when: baseconfig_create_user_and_group

- name: Generate & update locale to de_DE.UTF8
  shell: "locale-gen de_DE.UTF-8 && update-locale LANG=de_DE.UTF-8"

- name: Add loopback references to our domain in /etc/hosts
  lineinfile:
    dest=/etc/hosts
    state=present
    line="127.0.0.1 {{ baseconfig_hostname }}"

- name: Disallow password authentication
  lineinfile:
    dest=/etc/ssh/sshd_config
    state=present
    regexp="^PasswordAuthentication"
    line="PasswordAuthentication no"
  notify: restart sshd

- name: Disallow challenge response authentication
  lineinfile:
    dest=/etc/ssh/sshd_config
    state=present
    regexp="^ChallengeResponseAuthentication"
    line="ChallengeResponseAuthentication no"
  notify: restart sshd

- name: Make sure global known_hosts exists
  file: path=/etc/ssh/ssh_known_hosts state=touch

- name: Add hosts to known_hosts
  known_hosts:
    name={{ item.name }}
    key="{{ lookup('pipe', 'ssh-keyscan -t rsa -p {{ item.port }} {{ item.host }}') }}"
    path=/etc/ssh/ssh_known_hosts
  with_items: config_ssh_known_hosts
  ignore_errors: yes
  when: baseconfig_ssh_known_hosts

- name: Ensure ssh agent socket environment variable persists when sudoing
  lineinfile:
    dest=/etc/sudoers
    state=present
    insertafter="^Defaults"
    line='Defaults\tenv_keep += "SSH_AUTH_SOCK"'
    validate="visudo -cf %s"

- name: Allow passwordless sudo - DO NOT USE IN PRODUCTION!
  lineinfile:
    dest=/etc/sudoers
    state=present
    regexp="^%sudo"
    line="%sudo\tALL=(ALL:ALL) NOPASSWD:ALL"
    validate="visudo -cf %s"
  when: baseconfig_allow_passwordless_sudo

- include: ssl.yml
  when: server_ssl_cert_type != "letsencrypt"

- include: services.yml
